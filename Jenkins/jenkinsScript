USERNAME=jenkins
HOME=/opt/jenkins_home
VOL=jenkins_home
IMAGE=myimagejs:final
BASE_IMAGE=jenkins/jenkins:lts-jdk11
CONT=mycontjs
REF_LOC=/usr/share/jenkins/ref
NODEJS_HOME=/opt/nodejs
MAVEN_HOME=/var/jenkins_home/maven
DOL=$
PORT=8080
JNLP_PORT=449100


#mkdir $HOME
#chown 1000:1000 $HOME

#####################################
# Define no of executors in Jenkins master machine
#####################################

cat <<EOF >executors.groovy
import jenkins.model.*
Jenkins.instance.setNumExecutors(4)
EOF

#####################################
# Create casc in Jenkins master machine
#####################################

cat <<EOF >casc.yaml
jenkins:
  systemMessage: "Welcome to your Jenkins instance."
  securityRealm:
    local:
      allowsSignup: false
      users:
       - id: $DOL{JENKINS_ADMIN_ID}
         password: $DOL{JENKINS_ADMIN_PASSWORD}
       - id: test
         password: test@123		 
  authorizationStrategy:
    projectMatrix:
      permissions:
        - "Overall/Administer: $DOL{JENKINS_ADMIN_ID}"
        - "Overall/Read:authenticated"
        - "Overall/Read:test"
  remotingSecurity:
    enabled: true
security:
  queueItemAuthenticator:
    authenticators:
    - global:
        strategy: triggeringUsersAuthorizationStrategy		
unclassified:
  location:
    url: http://localhost:5000/
tool:
  JDK:
    installations:
      - name: JDK_master
        home: "/opt/java/openjdk"
  git:
    installations:
      - name: Default
        home: "git"
  Maven:
    installations:
      - name: mvn_master
        home: "$MAVEN_HOME"
jobs:
  - script: >
      job('Super-seed'){
        scm{
          git{
            remote{
              url('https://github.com/rahuldasdevops/microservice-pipelines.git')
              branch('develop@1.0')
            }
          }
        }
        steps{
          dsl{
            external('dsl/firstSpin.groovy')
          }
        }
      }    
EOF

#####################################
# Define plugins in Jenkins master machine
#####################################

cat <<EOF >plugins.txt
authorize-project:latest 
pipeline-maven:3.10.0
ssh
ssh-agent
oauth-credentials
antisamy-markup-formatter:latest
build-timeout:latest
cloudbees-folder:latest
configuration-as-code:latest
credentials-binding:latest
email-ext:latest
git:latest
github-branch-source:latest
mailer:latest
matrix-auth:latest
pam-auth:latest
pipeline-github-lib:latest
pipeline-stage-view:latest
ssh-slaves:latest
timestamper:latest
workflow-aggregator:latest
ws-cleanup:latest
junit:latest
job-dsl:latest
EOF

#####################################
# Download Maven and NodeJs package
#####################################
wget https://dlcdn.apache.org/maven/maven-3/3.8.2/binaries/apache-maven-3.8.2-bin.tar.gz
wget https://nodejs.org/dist/v14.17.6/node-v14.17.6-linux-x64.tar.xz
#####################################

#####################################
# creates docker-compose.yml
#####################################

cat <<EOF >docker-compose.yml

version: "3.9"
services:
  jenkins:
    image: $DOLIMAGE
    volumes:
      - $VOL:$HOME
    ports:
      - "$PORT:$PORT"
    environment:
      JENKINS_ADMIN_ID: "$DOL$DOL(cat /run/secrets/JENKINS_ADMIN_ID)"
      JENKINS_ADMIN_PASSWORD: "$DOL$DOL(cat /run/secrets/JENKINS_ADMIN_PASSWORD)"
    secrets:
      - JENKINS_ADMIN_ID
      - JENKINS_ADMIN_PASSWORD
secrets:
  JENKINS_ADMIN_ID:
    file: user.txt
  JENKINS_ADMIN_PASSWORD:
    file: pwd.txt
volumes:
  $VOL:
EOF
######################################
#####################################
# creates user.txt
#####################################

cat <<EOF >user.txt
XXXX
EOF
######################################

#####################################
# creates pwd.txt
#####################################
XXXX
cat <<EOF >pwd.txt
EOF
####################################


#####################################
# creates DockerFile
#####################################

cat <<EOF >Dockerfile
FROM $BASE_IMAGE
MAINTAINER Rahul Das
ENV JENKINS_SLAVE_AGENT_PORT=$JNLP_PORT
ENV JAVA_OPTS -Djenkins.install.runSetupWizard=false
ENV CASC_JENKINS_CONFIG $HOME/casc.yaml
ENV HOME $HOME
ENV NODEJS_HOME $NODEJS_HOME
ENV MAVEN_HOME $MAVEN_HOME
ENV PATH $DOLNODEJS_HOME/bin:$DOLMAVEN_HOME/bin:$DOLPATH
### Enable below PROXY if you run this in any enterprise
#ENV HTTPS_PROXY
#ENV HTTP_PROXY

COPY --chown=$USERNAME:$USERNAME plugins.txt $REF_LOC
RUN xargs /usr/local/bin/install-plugins.sh < $REF_LOC/plugins.txt

COPY --chown=$USERNAME:$USERNAME executors.groovy  $REF_LOC/init.groovy.d/executors.groovy
COPY --chown=$USERNAME:$USERNAME casc.yaml $HOME
#COPY --chown=$USERNAME:$USERNAME proxy.xml $HOME

ADD maven.tar.gz $REF_LOC
USER root
ADD node-v14.18.0-linux-x64.tar.xz /opt/

RUN mv $REF_LOC/apache-maven-3.8.3 $REF_LOC/maven
RUN mv /opt/node-v14.18.0-linux-x64 $NODEJS_HOME
RUN chown -R $USERNAME:$USERNAME $NODEJS_HOME

USER $USERNAME
EXPOSE $PORT
VOLUME $VOL
EOF

docker build --no-cache -t $IMAGE .
docker-compose up -d

#docker run -d --name $CONT -p 5000:8080 --env JENKINS_ADMIN_ID=admin --env JENKINS_ADMIN_PASSWORD=admin -v $HOME:/var/jenkins_home $IMAGE

#### Use this if you wish to run Manually #####
#docker run -d --name mycontjs -p 5000:8080 --env JENKINS_ADMIN_ID=admin --env JENKINS_ADMIN_PASSWORD=admin -v $HOME:/var/jenkins_home myimagejs:casc

### Run without bind or volume mount
#docker run -d --name mycontjs -p 5000:8080 --env JENKINS_ADMIN_ID=admin --env JENKINS_ADMIN_PASSWORD=admin myimagejs:<tag> D=admin myimagejs:<tag>

